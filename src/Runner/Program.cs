using System.CommandLine;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Runner.Logging;
using Runner.Scaffolding;

namespace Runner;

[ExcludeFromCodeCoverage]
static class Program
{
    static async Task Main(string[] args)
    {
        
        var rootCommand = GetDefaultCommand();
        rootCommand.Add(GetScaffoldCommand());

        await rootCommand.InvokeAsync(args);
    }

    private static Command GetDefaultCommand()
    {
        var cmd = new RootCommand("Spoof - An API mocking server");

        var delayOption = new Option<bool>
            (name: "--quiet", description: "Reduces the logging level slightly, showing only essential information");
        delayOption.AddAlias("-q");
        cmd.Add(delayOption);

        var portOption = new Option<int>
            (name: "--port", description: "The port the mock API will listen on");
        portOption.AddAlias("-p");
        portOption.SetDefaultValue(5050);
        cmd.Add(portOption);
        
        var noHotReloadOption = new Option<bool>
            ("--no-reload", "Turn of automatic re-loading of all routes when a file changes");
        noHotReloadOption.AddAlias("-nr");
        cmd.Add(noHotReloadOption);

        var internalsOptions = new Option<bool>
        (name: "--debug-internals",
            description: "Shows internal debug information, including logs generated by the framework");
        internalsOptions.AddAlias("-i");
        cmd.Add(internalsOptions);

        cmd.SetHandler(
            (quiet, port, internals, noHotReload) => 
                new MockServer().Run(quiet, port, internals, !noHotReload),
            delayOption,
            portOption,
            internalsOptions,
            noHotReloadOption
        );

        return cmd;
    }

    private static Command GetScaffoldCommand()
    {
        var cmd = new Command("scaffold", "Scaffolds a new mock API based on a template");
        
        var filenameArg = new Argument<string>("template", "The name of the template to use");
        cmd.Add(filenameArg);

        var outputFileNameArg = new Argument<string?>("filename", () => string.Empty, "The name of the file to scaffold");
        cmd.Add(outputFileNameArg);
        
        var openOption = new Option<bool>("--open", "Open the new JSON file in the default editor after creation");
        openOption.AddAlias("-o");
        cmd.Add(openOption);
        
        cmd.SetHandler(
            (template, output, open) =>
            {
                // If no target file is included, use the template name
                if (string.IsNullOrEmpty(output))
                    output = template;
                
                var logger = new ConsoleLogger();
                var fileName = new Scaffolder(logger, new ConsoleTableLogger()).Scaffold(template, output);

                if (string.IsNullOrEmpty(fileName) || !open) 
                    return;
                
                logger.Information("Opening {0} in 2 seconds. CTRL+C to cancel", fileName);
                Thread.Sleep(2000);
                new Process { StartInfo = new ProcessStartInfo(fileName) { UseShellExecute = true } }.Start();
            },
            filenameArg,
            outputFileNameArg,
            openOption
        );
        
        var list = new Command("list", "Lists all templates available for scaffolding new mocks");
        list.AddAlias("l");
        list.SetHandler(() => new Scaffolder(new ConsoleLogger(), new ConsoleTableLogger()).ListTemplates());
        cmd.Add(list);
        
        return cmd;
    }
}